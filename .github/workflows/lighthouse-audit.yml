name: Lighthouse Audit

on:
  schedule:
    - cron: '0 20 * * *'  # 01:30 AM IST
  workflow_dispatch:

jobs:
  lighthouse-audit:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install Lighthouse globally
        run: npm install -g lighthouse

      - name: Run Lighthouse and update report
        run: |
          set -e
          mkdir -p "Daily audits"
          DATE=$(date +%F)
          TIME=$(date '+%H:%M:%S')
          
          echo "Running Lighthouse directly..."
          lighthouse https://krajtilak.vercel.app \
            --output=json \
            --output-path=lighthouse-report.json \
            --chrome-flags="--no-sandbox --disable-dev-shm-usage --disable-gpu --headless --disable-web-security" \
            --quiet || {
            echo "Lighthouse failed, trying with different flags..."
            lighthouse https://krajtilak.vercel.app \
              --output=json \
              --output-path=lighthouse-report.json \
              --preset=desktop \
              --chrome-flags="--no-sandbox --headless" \
              --quiet
          }

          if [ ! -f "lighthouse-report.json" ]; then
            echo "Lighthouse report not generated!"
            exit 1
          fi

          # Create or update the single audit file
          AUDIT_FILE="Daily audits/lighthouse-audit.md"
          
          echo "# Lighthouse Audit Report" > "$AUDIT_FILE"
          echo "URL: https://krajtilak.vercel.app" >> "$AUDIT_FILE"
          echo "" >> "$AUDIT_FILE"
          echo "**Last Updated:** $DATE at $TIME UTC" >> "$AUDIT_FILE"
          echo "" >> "$AUDIT_FILE"

          # Extract scores using Node.js
          node -e "
            const fs = require('fs');
            try {
              const report = JSON.parse(fs.readFileSync('lighthouse-report.json', 'utf8'));
              const categories = report.categories;
              
              if (!categories) {
                console.log('- Error: No categories found in report');
                process.exit(1);
              }
              
              console.log('## Performance Scores');
              console.log('');
              
              const scores = {
                'Performance': Math.floor((categories.performance?.score || 0) * 100),
                'Accessibility': Math.floor((categories.accessibility?.score || 0) * 100),
                'Best Practices': Math.floor((categories['best-practices']?.score || 0) * 100),
                'SEO': Math.floor((categories.seo?.score || 0) * 100)
              };
              
              Object.entries(scores).forEach(([key, value]) => {
                let emoji = 'ðŸ”´';
                if (value >= 90) emoji = 'ðŸŸ¢';
                else if (value >= 50) emoji = 'ðŸŸ¡';
                console.log(\`- \${emoji} **\${key}**: \${value}%\`);
              });
              
              console.log('');
              console.log('## Key Metrics');
              console.log('');
              
              // Add some key metrics
              const metrics = report.audits;
              if (metrics['first-contentful-paint']) {
                const fcp = Math.round(metrics['first-contentful-paint'].numericValue);
                console.log(\`- **First Contentful Paint**: \${fcp}ms\`);
              }
              if (metrics['largest-contentful-paint']) {
                const lcp = Math.round(metrics['largest-contentful-paint'].numericValue);
                console.log(\`- **Largest Contentful Paint**: \${lcp}ms\`);
              }
              if (metrics['cumulative-layout-shift']) {
                const cls = metrics['cumulative-layout-shift'].numericValue.toFixed(3);
                console.log(\`- **Cumulative Layout Shift**: \${cls}\`);
              }
              if (metrics['speed-index']) {
                const si = Math.round(metrics['speed-index'].numericValue);
                console.log(\`- **Speed Index**: \${si}ms\`);
              }
              if (metrics['total-blocking-time']) {
                const tbt = Math.round(metrics['total-blocking-time'].numericValue);
                console.log(\`- **Total Blocking Time**: \${tbt}ms\`);
              }
              
            } catch (error) {
              console.log('- Error parsing report:', error.message);
              process.exit(1);
            }
          " >> "$AUDIT_FILE"

          echo "" >> "$AUDIT_FILE"
          echo "---" >> "$AUDIT_FILE"
          echo "*Generated by GitHub Actions*" >> "$AUDIT_FILE"

          # Clean up
          rm lighthouse-report.json

      - name: Commit the updated report
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          DATE=$(date +%F)
          AUDIT_FILE="Daily audits/lighthouse-audit.md"
          
          if [ -f "$AUDIT_FILE" ]; then
            git add "$AUDIT_FILE"
            if git diff --staged --quiet; then
              echo "No changes to commit"
            else
              git commit -m "Update Lighthouse Audit - $DATE"
              git push
            fi
          else
            echo "Report file not found, nothing to commit"
            exit 1
          fi